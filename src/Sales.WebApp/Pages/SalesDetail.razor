@page "/salesDetail"
@using Sales.Core.Application.DTO_Entities
@using System.Net.Http.Json
@using System.Text.Json
@using Sales.Core.Domain

@inject HttpClient Http
@inject ILogger<SalesDto> Logger

<PageTitle>Sales Details</PageTitle>

<h1>Sales Details</h1>

<p>Sales Details</p>
<div class="status-container">
    @switch (currentState)
    {
        case LoadingState.Loading:
            <div class="alert alert-info" role="alert">
                <p><em>Loading data...</em></p>
            </div>
            break;

        case LoadingState.Error:
            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading">Error Loading Data</h4>
                @if (errorMessage?.Any() == true)
                {
                    <ul>
                        @foreach (var error in errorMessage)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }
                else
                {
                    <p>An unknown error occurred.</p>
                }
            </div>
            break;

        case LoadingState.Success when SalesDetailData?.Any() != true:
            <div class="alert alert-warning" role="alert">
                <p>No sales data available.</p>
            </div>
            break;

        case LoadingState.Success:
            <table class="table">
                <thead>
                    <tr>
                        <th>Country</th>
                        <th>Segment</th>
                        <th>DiscountBand</th>
                        <th>UnitsSold (GBP)</th>
                        <th>ManufacturingPrice (GBP)</th>
                        <th>SalePrice (GBP)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sales in PaginatedSales)
                    {
                        <tr>
                            <td>@sales.Country</td>
                            <td>@sales.Segment</td>
                            <td>@sales.DiscountBand</td>
                            <td>@sales.UnitsSold</td>
                            <td>@sales.ManufacturingPrice</td>
                            <td>@sales.SalePrice</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="pagination-controls" style="margin-top: 20px;">
                <button class="btn btn-primary" disabled="@(CurrentPage == 1)" @onclick="PreviousPage">Previous</button>
                <span style="margin: 0 15px;">Page @CurrentPage of @TotalPages</span>
                <button class="btn btn-primary" disabled="@(CurrentPage == TotalPages)" @onclick="NextPage">Next</button>
            </div>
            break;
    }
</div>

@code {
    private IEnumerable<SalesDto>? SalesDetailData;
    private IEnumerable<SalesDto> PaginatedSales { get; set; } = Enumerable.Empty<SalesDto>();
    private List<string>? errorMessage;
    private LoadingState currentState = LoadingState.Loading;
    private bool isRetrying = false;
    private int CurrentPage { get; set; } = 1;
    private const int PageSize = 20;
    private int TotalPages => SalesDetailData != null ? (int)Math.Ceiling((double)SalesDetailData.Count() / PageSize) : 0;

    private enum LoadingState
    {
        Loading,
        Success,
        Error
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            currentState = LoadingState.Loading;
            SalesDetailData = null;
            errorMessage = null;

            var response = await Http.GetAsync("Sales");
            response.EnsureSuccessStatusCode();

            var salesApiResponse = await response.Content.ReadFromJsonAsync<SalesApiResponse<IEnumerable<SalesDto>>>();

            if (salesApiResponse == null)
            {
                throw new JsonException("Received null response from API");
            }

            if (!salesApiResponse.IsSuccessful)
            {
                currentState = LoadingState.Error;
                errorMessage = salesApiResponse?.Errors?.ToList() ?? default;
                Logger.LogWarning("Sales API returned unsuccessful response: {Error}", errorMessage);
                return;
            }

            SalesDetailData = salesApiResponse.Data ?? Enumerable.Empty<SalesDto>();
            currentState = LoadingState.Success;
            await UpdatePaginatedData();

            Logger.LogInformation("Successfully loaded {Count} sales summary records", SalesDetailData.Count());
        }
        catch (HttpRequestException ex)
        {
            currentState = LoadingState.Error;
            errorMessage = new List<string> { $"Network error: {ex.Message}. Please check Sales API is running." };
            Logger.LogError(ex, "HTTP error occurred while fetching sales summary");
        }
        catch (JsonException ex)
        {
            currentState = LoadingState.Error;
            errorMessage = new List<string> { $"Data processing error: {ex.Message}" };
            Logger.LogError(ex, "JSON deserialization error occurred");
        }
        catch (Exception ex)
        {
            currentState = LoadingState.Error;
            errorMessage = new List<string> { $"Unexpected error: {ex.Message}" };
            Logger.LogError(ex, "Unexpected error occurred while fetching sales summary");
        }
        finally
        {
            isRetrying = false;
            StateHasChanged();
        }
    }

    private async Task UpdatePaginatedData()
    {
        if (SalesDetailData != null)
        {
            PaginatedSales = SalesDetailData
                .Skip((CurrentPage - 1) * PageSize)
                .Take(PageSize);
        }
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await UpdatePaginatedData();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await UpdatePaginatedData();
            StateHasChanged();
        }
    }
}